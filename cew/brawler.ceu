#ifndef ALL
    #include "sdl.ceu"

//============================================================
    #define PI 3.14
    #define WINDOW_TITLE "Hero Brawler"
    #define RES_X 640
    #define RES_Y 480
    #define GRAVITY 5.0
//============================================================
    input void SDL_QUIT;
    input void SDL_REDRAW;
    input int  SDL_DT;
    input _SDL_KeyboardEvent* SDL_KEYDOWN;
    input _SDL_KeyboardEvent* SDL_KEYUP;

    var _SDL_Window[] win;
    finalize
        win = _SDL_CreateWindow(WINDOW_TITLE, 100,100, RES_X, RES_Y, 0);
    with
        _SDL_DestroyWindow(win);
    end

    var _SDL_Renderer[] ren;
    finalize
        ren = _SDL_CreateRenderer(win, -1, 0);
    with
        _SDL_DestroyRenderer(ren);
    end
#else
    _SDL_SetWindowTitle(win, WINDOW_TITLE);
#endif

//============================================================

native do
    SDL_Texture* HERO_TEXTURE;
end
    finalize
        _HERO_TEXTURE = _IMG_LoadTexture(ren, "charmander.png");
    with
        _SDL_DestroyTexture(_HERO_TEXTURE);
    end

    if _HERO_TEXTURE == null then
        _printf("SDL_Init failed: %s\n", _SDL_GetError());
    end

//============================================================

interface Position with
    var float pos_x;
    var float pos_y;
end

interface Speed with
    var float spd_x;
    var float spd_y;
end

interface Acceleration with
    var float acc_x;
    var float acc_y;
end


//============================================================


interface Body with
    /*
    interface Position;
    interface Speed;
    interface Acceleration;
    */
    
    var float pos_x;
    var float pos_y;
    var float spd_x;
    var float spd_y;
    var float acc_x;
    var float acc_y;
    
end


//============================================================

/*
class Platform with
    interface Position;
    var _SDL_Renderer[] ren;
    var w;
    var h;
do

end
*/

class Hero with
    interface Body;
    var _SDL_Renderer[] ren;
    var float hp;
do
    var _SDL_Rect rect;
    var _SDL_Texture[] tex = _HERO_TEXTURE;
    this.rect.x = pos_x * RES_X;
    this.rect.y = pos_y * RES_Y;
    this.rect.w = 0.15 * RES_X;
    this.rect.h = 0.2 * RES_Y;
    this.spd_x = 0;
    this.spd_y = 0;
    this.acc_x = 0;
    this.acc_y = 0;

    var int jumps_max = 2;
    var int jumps_ready = jumps_max;

    par do
        var int dt_ms;
        var float dt_s;
        every dt_ms in SDL_DT do
            dt_s = dt_ms/1000.0;

            this.pos_x = this.pos_x + this.spd_x * dt_s;
            this.pos_y = this.pos_y + this.spd_y * dt_s;

            this.spd_x = this.spd_x + this.acc_x * dt_s;
            this.spd_y = this.spd_y + this.acc_y * dt_s;
        end
    with
        var int dt_ms;
        var float dt_s;
        every dt_ms in SDL_DT do
            dt_s = dt_ms/1000.0;

            this.spd_y = this.spd_y + GRAVITY * dt_s;

            if this.pos_y >= 0.8 then
                this.spd_y = 0;
                this.pos_y = 0.8;
                jumps_ready = jumps_max;
            end
        end
    with
        var _SDL_KeyboardEvent* key;
        every key in SDL_KEYDOWN do
            if key:keysym.sym == _SDLK_UP then
            else/if key:keysym.sym == _SDLK_LEFT then
                this.spd_x = -0.4;
            else/if key:keysym.sym == _SDLK_RIGHT then
                this.spd_x = 0.4;
            end
        end
    with
        var _SDL_KeyboardEvent* key;
        loop do
            key = await SDL_KEYDOWN;
            if key:keysym.sym == _SDLK_UP then
                if jumps_ready > 0 then
                    this.spd_y = -1.5;
                    jumps_ready = jumps_ready - 1;
                    await 200ms;
                end
            end
        end
    with
        var _SDL_KeyboardEvent* key;
        every key in SDL_KEYUP do
            if key:keysym.sym == _SDLK_UP then
               // this.spd_y = 0;
            else/if key:keysym.sym == _SDLK_DOWN then
               // this.spd_y = 0;
            else/if key:keysym.sym == _SDLK_LEFT then
                this.spd_x = 0;
            else/if key:keysym.sym == _SDLK_RIGHT then
                this.spd_x = 0;
            end
        end
    with
        every SDL_REDRAW do
            this.rect.x = this.pos_x * RES_X;
            this.rect.y = this.pos_y * RES_Y;
            _SDL_RenderCopy(ren, tex, null, &rect);
        end
    end

end

//============================================================

par/or do
    every SDL_REDRAW do
        _SDL_SetRenderDrawColor(ren, 0xFF, 0xFF, 0xFF, 0);
        _SDL_RenderFillRect(ren, null);
    end
with
    var Hero charmander with
        this.ren   = ren;
        this.pos_x   = 0.5;
        this.pos_y  = 0.5;
    end;
    await FOREVER;
with
    every SDL_REDRAW do
        _SDL_RenderPresent(ren);
    end
with
    await SDL_QUIT;
end

escape 0;
