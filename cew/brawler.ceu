#ifndef ALL
    #include "sdl.ceu"

native do
    float abs_float(float x)
    {
        return x<0?-x:x;
    }
end

//============================================================

    #define PI 3.14
    #define WINDOW_TITLE "Hero Brawler"
    #define RES_X 640
    #define RES_Y 480
    #define GRAVITY 5.0
    #define FLOAT_ERR 0.05

//============================================================

    input void SDL_QUIT;
    input void SDL_REDRAW;
    input int  SDL_DT;

//============================================================

    input _SDL_KeyboardEvent[] SDL_KEYDOWN;
    input _SDL_KeyboardEvent[] SDL_KEYUP;

//============================================================

    var _SDL_Window[] win;
    finalize
        win = _SDL_CreateWindow(WINDOW_TITLE, 100,100, RES_X, RES_Y, 0);
    with
        _SDL_DestroyWindow(win);
    end

    var _SDL_Renderer[] ren;
    finalize
        ren = _SDL_CreateRenderer(win, -1, 0);
    with
        _SDL_DestroyRenderer(ren);
    end
#else
    _SDL_SetWindowTitle(win, WINDOW_TITLE);
#endif

//============================================================

native do
    SDL_Texture* HERO_TEXTURE;
end
    finalize
        _HERO_TEXTURE = _IMG_LoadTexture(ren, "charmander.png");
    with
        _SDL_DestroyTexture(_HERO_TEXTURE);
    end

    if _HERO_TEXTURE == null then
        _printf("SDL_Init failed: %s\n", _SDL_GetError());
    end

//============================================================

interface Position with
    var float pos_x;
    var float pos_y;
end

interface Speed with
    var float spd_x;
    var float spd_y;
end

interface Acceleration with
    var float acc_x;
    var float acc_y;
end

//============================================================

interface Body with
    interface Position;
    interface Speed;
    interface Acceleration; 
end

interface SquareDimensions with
    var float w;
    var float h;
end

//============================================================


class Platform with
    var _SDL_Renderer[] ren;

    interface Position;
    interface SquareDimensions;

    event void go_collide;
    event void un_collide;
do
    var _SDL_Rect rect;
    var int r = 0x00;
    var int g = 0x00;
    var int b = 0x00;

    par do
        loop do
            await go_collide;
            b = 0xFF;
        end 
    with
        loop do
            await un_collide;
            b = 0x00;
        end 
    with
        every SDL_REDRAW do
            this.rect.x = pos_x * RES_X;
            this.rect.y = pos_y * RES_Y;
            this.rect.w = w * RES_X;
            this.rect.h = h * RES_Y;
            _SDL_SetRenderDrawColor(ren, r, g, b, 0xFF);
            _SDL_RenderFillRect(ren, &rect);
        end
    end
end

class Hero with
    var _SDL_Renderer[] ren;

    interface Body;
    interface SquareDimensions;
    event float go_collide;
    event void change_color;
    event void die;
    event void enable_jump;
    event void disable_jump;
    event void enable_movement;
    event void disable_movement;

    var int r = 0x00;
    var int g = 0x00;
    var int b = 0x00;

do
    var float hp_w = 0.5;
    var float hp_h = 0.05;
    var float hp_pos_x = 0.05;
    var float hp_pos_y = 0.05;
    var _SDL_Rect hp_rect;
    var int hp_r = 0x33;
    var int hp_g = 0xFF;
    var int hp_b = 0x77;

    var bool walk_l = false;
    var bool walk_r = false;
    var _SDL_Rect rect;
    var _SDL_Texture[] tex = _HERO_TEXTURE;

    var float hp = 1.0;

    this.spd_x = 0;
    this.spd_y = 0;
    this.acc_x = 0;
    this.acc_y = 0;

    var int jumps_max = 2;
    var int jumps_ready = jumps_max;

    par do
        var int dt_ms;
        var float dt_s;
        every dt_ms in SDL_DT do
            dt_s = dt_ms/1000.0;

            this.pos_x = this.pos_x + this.spd_x * dt_s;
            this.pos_y = this.pos_y + this.spd_y * dt_s;

            this.spd_x = this.spd_x + this.acc_x * dt_s;
            this.spd_y = this.spd_y + this.acc_y * dt_s;
        end
    with
        var int dt_ms;
        var float dt_s;
        every dt_ms in SDL_DT do
            dt_s = dt_ms/1000.0;

            this.spd_y = this.spd_y + GRAVITY * dt_s;
        end
    with
        var float plat_y;
        loop do
            plat_y = await go_collide;
            this.spd_y = 0;
            this.pos_y = plat_y - this.h;
            jumps_ready = jumps_max;
        end
    with
        loop do
            await die;
            this.pos_x = 0.5;
            this.pos_y = 0.0;
            this.spd_x = 0;
            this.spd_y = 0;
            this.acc_x = 0;
            this.acc_y = 0;
            jumps_ready = 0;
            hp = hp - 0.3;
        end
    with
        var int dt_ms;
        var float dt_s;
        every dt_ms in SDL_DT do
            dt_s = dt_ms/1000.0;

            if walk_l == true then
                this.pos_x = this.pos_x + (-0.4) * dt_s;
            end
            if walk_r == true then
                this.pos_x = this.pos_x + (0.4) * dt_s;
            end
        end
    with
        loop do
            par/or do
                par do
                    var _SDL_KeyboardEvent[] key;
                    every key in SDL_KEYDOWN do
                        if key:keysym.sym == _SDLK_LEFT then
                            walk_l = true;
                        else/if key:keysym.sym == _SDLK_RIGHT then
                            walk_r = true;
                        end
                    end
                with
                    var _SDL_KeyboardEvent[] key;
                    every key in SDL_KEYUP do
                        if key:keysym.sym == _SDLK_LEFT then
                            walk_l = false;
                        else/if key:keysym.sym == _SDLK_RIGHT then
                            walk_r = false;
                        end
                    end
                end
            with
                await disable_movement;
                walk_l = false;
                walk_r = false;
            end
            await enable_movement;
        end 
    with
        loop do
            par/or do
                var _SDL_KeyboardEvent[] key;
                loop do
                    key = await SDL_KEYDOWN;
                    if key:keysym.sym == _SDLK_UP then
                        if jumps_ready > 0 then
                            this.spd_y = -1.5;
                            jumps_ready = jumps_ready - 1;
                            //await 200ms;
                        end
                    end
                end
            with
                await disable_jump;
            end
            await enable_jump;
        end
    with
        loop do
            await change_color;
            _SDL_SetTextureColorMod(_HERO_TEXTURE, r, g, b);
        end 
    with
        every SDL_REDRAW do
            this.rect.x = pos_x * RES_X;
            this.rect.y = pos_y * RES_Y;
            this.rect.w = w * RES_X;
            this.rect.h = h * RES_Y;
            _SDL_RenderCopy(ren, tex, null, &rect);
        end
    with
        every SDL_REDRAW do
            this.hp_rect.x = hp_pos_x * RES_X;
            this.hp_rect.y = hp_pos_y * RES_Y;
            this.hp_rect.w = hp_w * hp * RES_X;
            this.hp_rect.h = hp_h * RES_Y;
            _SDL_SetRenderDrawColor(ren, hp_r, hp_g, hp_b, 0xFF);
            _SDL_RenderFillRect(ren, &hp_rect);

            this.hp_rect.x = hp_pos_x * RES_X;
            this.hp_rect.y = hp_pos_y * RES_Y;
            this.hp_rect.w = hp_w * RES_X;
            this.hp_rect.h = hp_h * RES_Y;
            _SDL_SetRenderDrawColor(ren, 0x00,  0x00, 0x00, 0xFF);
            _SDL_RenderDrawRect(ren, &hp_rect);
        end
    end
end

//===========================================================

interface Attack with
    var float dmg;
end

//===========================================================

class FireBall with
    var _SDL_Renderer[] ren;

    interface Body;
    interface SquareDimensions;
    interface Attack;

    var int horizontal;
    var int vertical;
do
    var _SDL_Rect rect;
    var _SDL_Texture[] tex = _HERO_TEXTURE;

    if horizontal == 1 then
        this.spd_x = 1.0;
    else/if horizontal == -1 then
        this.spd_x = -1.0;
    else
        this.spd_x = 0.0;
    end
    if vertical == 1 then
        this.spd_y = 1.0;
    else/if vertical == -1 then
        this.spd_y = -1.0;
    else
        this.spd_y = 0.0;
    end
    this.acc_x = 0;
    this.acc_y = 0;

    var int r = 0xD8;
    var int g = 0x95;
    var int b = 0x10;

    par/or do
        var int dt_ms;
        var float dt_s;
        every dt_ms in SDL_DT do
            dt_s = dt_ms/1000.0;

            this.pos_x = this.pos_x + this.spd_x * dt_s;
            this.pos_y = this.pos_y + this.spd_y * dt_s;

            this.spd_x = this.spd_x + this.acc_x * dt_s;
            this.spd_y = this.spd_y + this.acc_y * dt_s;
        end
    with
        every SDL_REDRAW do
            this.rect.x = pos_x * RES_X;
            this.rect.y = pos_y * RES_Y;
            this.rect.w = w * RES_X;
            this.rect.h = h * RES_Y;
            _SDL_SetRenderDrawColor(ren, r, g, b, 0xFF);
            _SDL_RenderFillRect(ren, &rect);
        end
    with
        every SDL_DT do
            if this.pos_x > 2.0 or this.pos_x < -2.0 then
                break;
            end
            if this.pos_y > 2.0 or this.pos_y < -2.0 then
                break;
            end
        end
    end
end

class FireNovaParticle with
    var _SDL_Renderer[] ren;

    interface Body;
    interface SquareDimensions;
    interface Attack;

    var float angle;
do
    var _SDL_Rect rect;
    var _SDL_Texture[] tex = _HERO_TEXTURE;

    this.spd_x = 0.3 * _sin(angle);
    this.spd_y = 0.3 * RES_X/RES_Y * _cos(angle);
    this.acc_x = - 4.0 * this.spd_x;
    this.acc_y = - 4.0 * this.spd_y;

    var int r = 0xFF;
    var int g = 0x65;
    var int b = 0x10;

    par/or do
        var int dt_ms;
        var float dt_s;
        every dt_ms in SDL_DT do
            dt_s = dt_ms/1000.0;

            angle = angle + PI/8.0 * dt_s + PI/2.5 * dt_s * dt_s;
            this.pos_x = this.pos_x + 0.3 * _sin(angle) * dt_s;
            this.pos_y = this.pos_y + 0.3 * RES_X/RES_Y * _cos(angle) * dt_s;
        end
    with
        var int dt_ms;
        var float dt_s;
        every dt_ms in SDL_DT do
            dt_s = dt_ms/1000.0;

            this.pos_x = this.pos_x + this.spd_x * dt_s;
            this.pos_y = this.pos_y + this.spd_y * dt_s;

            this.spd_x = this.spd_x + this.acc_x * dt_s;
            this.spd_y = this.spd_y + this.acc_y * dt_s;
        end
    with
        every SDL_REDRAW do
            this.rect.x = pos_x * RES_X;
            this.rect.y = pos_y * RES_Y;
            this.rect.w = w * RES_X;
            this.rect.h = h * RES_Y;
            _SDL_SetRenderDrawColor(ren, r, g, b, 0xFF);
            _SDL_RenderFillRect(ren, &rect);
        end
    with
        every SDL_DT do
            if this.pos_x > 2.0 or this.pos_x < -2.0 then
                break;
            end
            if this.pos_y > 2.0 or this.pos_y < -2.0 then
                break;
            end
        end
    end
end

class FireFloorParticle with
    var _SDL_Renderer[] ren;

    interface Body;
    interface SquareDimensions;
    interface Attack;
do
    var _SDL_Rect rect;
    var _SDL_Texture[] tex = _HERO_TEXTURE;

    this.spd_x = 0.2 * (_rand()%200/100.0 - 1.0);
    this.spd_y = 0.3 * (_rand()%100/100.0) + 0.5;
    this.acc_x = 0.0;
    this.acc_y = 0.0;

    var int r = 0xFF;
    var int g = 0x20;
    var int b = 0x10;

    par/or do
        var int dt_ms;
        var float dt_s;
        every dt_ms in SDL_DT do
            dt_s = dt_ms/1000.0;

            this.pos_x = this.pos_x + this.spd_x * dt_s;
            this.pos_y = this.pos_y + this.spd_y * dt_s;

            this.spd_x = this.spd_x + this.acc_x * dt_s;
            this.spd_y = this.spd_y + this.acc_y * dt_s;
        end
    with
        every SDL_REDRAW do
            this.rect.x = pos_x * RES_X;
            this.rect.y = pos_y * RES_Y;
            this.rect.w = w * RES_X;
            this.rect.h = h * RES_Y;
            _SDL_SetRenderDrawColor(ren, r, g, b, 0xFF);
            _SDL_RenderFillRect(ren, &rect);
        end
    with
        every SDL_DT do
            if this.pos_x > 2.0 or this.pos_x < -2.0 then
                break;
            end
            if this.pos_y > 2.0 or this.pos_y < -2.0 then
                break;
            end
        end
    end
end

class FlameThrowerParticle with
    var _SDL_Renderer[] ren;

    interface Body;
    interface SquareDimensions;
    interface Attack;

    var float angle;
    var float range_factor;
do
    var _SDL_Rect rect;
    var _SDL_Texture[] tex = _HERO_TEXTURE;

    angle = angle + ((_rand()%200/100.0)-1.0)*PI/8.0;

    this.spd_x = 1.3 * range_factor * _sin(angle);
    this.spd_y = 1.3 * range_factor * RES_X/RES_Y * _cos(angle);
    this.acc_x = - 2.0 * this.spd_x;
    this.acc_y = - 2.0 * this.spd_y;

    var int r = 0xFF;
    var int g = 0x65;
    var int b = 0x10;

    par/or do
        var int dt_ms;
        var float dt_s;
        every dt_ms in SDL_DT do
            dt_s = dt_ms/1000.0;

            this.pos_x = this.pos_x + this.spd_x * dt_s;
            this.pos_y = this.pos_y + this.spd_y * dt_s;

            this.spd_x = this.spd_x + this.acc_x * dt_s;
            this.spd_y = this.spd_y + this.acc_y * dt_s;
        end
    with
        every SDL_REDRAW do
            this.rect.x = pos_x * RES_X;
            this.rect.y = pos_y * RES_Y;
            this.rect.w = w * RES_X;
            this.rect.h = h * RES_Y;
            _SDL_SetRenderDrawColor(ren, r, g, b, 0xFF);
            _SDL_RenderFillRect(ren, &rect);
        end
    with
        every SDL_DT do
            if this.pos_x > 2.0 or this.pos_x < -2.0 then
                break;
            end
            if this.pos_y > 2.0 or this.pos_y < -2.0 then
                break;
            end
            if _sqrt(this.spd_x*this.spd_x + this.spd_y*this.spd_y) <= FLOAT_ERR then
                break;
            end
        end
    end
end


//============================================================

par/or do
    every SDL_REDRAW do
        _SDL_SetRenderDrawColor(ren, 0xAA, 0xAA, 0xAA, 0);
        _SDL_RenderFillRect(ren, null);
    end
with
    var Hero charmander with
        this.ren = ren;
        this.pos_x = 0.2;
        this.pos_y = 0.5;
        this.w  = 0.10;
        this.h  = this.w * RES_X / RES_Y;
    end;

    pool Platform[] platforms;
    pool Attack[] attacks;

    spawn Platform in platforms with
        this.ren = ren;
        this.pos_x = 0.15;
        this.pos_y = 0.65;
        this.w  = 0.25;
        this.h  = 0.05;
    end;
    spawn Platform in platforms with
        this.ren = ren;
        this.pos_x = 0.55;
        this.pos_y = 0.45;
        this.w  = 0.25;
        this.h  = 0.05;
    end;
    spawn Platform in platforms with
        this.ren = ren;
        this.pos_x = 0.1;
        this.pos_y = 0.90;
        this.w  = 0.8;
        this.h  = 0.05;
    end;

    par do
        every SDL_DT do
            loop (Platform*)plat in platforms do
                if charmander.pos_x + charmander.w >= plat:pos_x and 
                    charmander.pos_x <= plat:pos_x + plat:w and 
                    _abs_float(charmander.pos_y + charmander.h - plat:pos_y) <= FLOAT_ERR and
                    charmander.spd_y > 0 then

                    emit charmander.go_collide => plat:pos_y;
                    emit plat:go_collide;
                else
                    emit plat:un_collide;
                end
            end

            if charmander.pos_y >= 1.0 then
                emit charmander.die;
            end
        end
    with
        var _SDL_KeyboardEvent[] key;
        var bool can_use_skills = true;
        par do
            loop do
                key = await SDL_KEYDOWN;
                if key:keysym.sym == _SDLK_q and can_use_skills == true then
                    can_use_skills = false;
                    charmander.r = 0xD8;
                    charmander.g = 0x95;
                    charmander.b = 0x10;
                    emit charmander.change_color;
                    emit charmander.disable_movement;
                    emit charmander.disable_jump;
                    var _SDL_KeyboardEvent[] key2;
                    key2 = await SDL_KEYDOWN;
                    if key2:keysym.sym == _SDLK_RIGHT then
                        spawn FireBall in attacks with
                            this.ren = ren;
                            this.w  = 0.05;
                            this.h  = this.w * RES_X / RES_Y;
                            this.pos_x = charmander.pos_x + charmander.w;
                            this.pos_y = charmander.pos_y + charmander.h / 2.0 - this.h / 2.0;
                            this.horizontal = 1;
                            this.vertical = 0;
                        end;
                    else/if key2:keysym.sym == _SDLK_LEFT then
                        spawn FireBall in attacks with
                            this.ren = ren;
                            this.w  = 0.05;
                            this.h  = this.w * RES_X / RES_Y;
                            this.pos_x = charmander.pos_x - this.w;
                            this.pos_y = charmander.pos_y + charmander.h / 2.0 - this.h / 2.0;
                            this.horizontal = -1;
                            this.vertical = 0;
                        end;
                    else/if key2:keysym.sym == _SDLK_UP then
                        spawn FireBall in attacks with
                            this.ren = ren;
                            this.w  = 0.05;
                            this.h  = this.w * RES_X / RES_Y;
                            this.pos_x = charmander.pos_x + charmander.w / 2.0 - this.w / 2.0;
                            this.pos_y = charmander.pos_y - this.h;
                            this.horizontal = 0;
                            this.vertical = -1;
                        end;
                    else/if key2:keysym.sym == _SDLK_DOWN then
                        spawn FireBall in attacks with
                            this.ren = ren;
                            this.w  = 0.05;
                            this.h  = this.w * RES_X / RES_Y;
                            this.pos_x = charmander.pos_x + charmander.w / 2.0 - this.w / 2.0;
                            this.pos_y = charmander.pos_y + charmander.h;
                            this.horizontal = 0;
                            this.vertical = 1;
                        end;
                    end
                    charmander.r = 0xFF;
                    charmander.g = 0xFF;
                    charmander.b = 0xFF;
                    emit charmander.enable_jump;
                    emit charmander.enable_movement;
                    emit charmander.change_color;
                    can_use_skills = true;
                end
            end
        with
            loop do
                key = await SDL_KEYDOWN;
                if key:keysym.sym == _SDLK_w and can_use_skills == true then
                    can_use_skills = false;
                    charmander.r = 0xFF;
                    charmander.g = 0x65;
                    charmander.b = 0x10;
                    emit charmander.change_color;
                    emit charmander.disable_movement;
                    emit charmander.disable_jump;

                    var float angle;
                    var int amount;

                    angle = (_rand()%100)/100.0 * 2*PI;
                    amount = 10;
                    loop i in amount do
                        spawn FireNovaParticle in attacks with
                            this.ren = ren;
                            this.w  = 0.03;
                            this.h  = this.w * RES_X / RES_Y;
                            this.pos_x = charmander.pos_x + charmander.w / 2.0 - this.w / 2.0;
                            this.pos_y = charmander.pos_y + charmander.h / 2.0 - this.h / 2.0;
                            this.angle = angle;
                        end;

                        angle = angle + 2 * PI / amount;
                    end
                    par/and do
                        await 1s;
                        charmander.r = 0xFF;
                        charmander.g = 0xFF;
                        charmander.b = 0xFF;
                        emit charmander.enable_jump;
                        emit charmander.enable_movement;
                        emit charmander.change_color;
                        can_use_skills = true;
                    with
                        await 2s;
                    end
                end
            end
        with
            loop do
                key = await SDL_KEYDOWN;
                if key:keysym.sym == _SDLK_e and can_use_skills == true then
                    can_use_skills = false;
                    charmander.r = 0xFF;
                    charmander.g = 0x65;
                    charmander.b = 0x10;
                    emit charmander.change_color;
                    emit charmander.disable_movement;
                    emit charmander.disable_jump;

                    var float angle;
                    var _SDL_KeyboardEvent[] key2;
                    key2 = await SDL_KEYDOWN;
                    if key2:keysym.sym == _SDLK_RIGHT then
                        angle = PI / 2.0;
                    else/if key2:keysym.sym == _SDLK_LEFT then
                        angle = 3 * PI / 2.0;
                    else/if key2:keysym.sym == _SDLK_UP then
                        angle = PI;
                    else/if key2:keysym.sym == _SDLK_DOWN then
                        angle = 0.0;
                    else
                        angle = 0.0;
                    end

                    var int move_fire = 0;
                    par/or do
                        var int i = 0;
                        loop do
                            await 10ms;
                            spawn FlameThrowerParticle in attacks with
                                this.ren = ren;
                                this.w  = 0.03;
                                this.h  = this.w * RES_X / RES_Y;
                                this.pos_x = charmander.pos_x + charmander.w / 2.0 - this.w / 2.0;
                                this.pos_y = charmander.pos_y + charmander.h / 2.0 - this.h / 2.0;
                                this.angle = angle;
                                this.range_factor = 1.0 - (10 * i) / 7000.0;
                            end;
                            i = i + 1;
                        end
                    with
                        await 5s;
                    with
                        var int dt_ms;
                        var float dt_s;
                        every dt_ms in SDL_DT do
                            dt_s = dt_ms/1000.0;

                            angle = angle + move_fire * PI * dt_s;
                        end 
                    with
                        var _SDL_KeyboardEvent[] key3;
                        every key3 in SDL_KEYDOWN do
                            if key3:keysym.sym == _SDLK_RIGHT then
                                move_fire = 1;
                            else/if key3:keysym.sym == _SDLK_LEFT then
                                move_fire = -1;
                            else/if key3:keysym.sym == _SDLK_UP then
                                move_fire = 1;
                            else/if key3:keysym.sym == _SDLK_DOWN then
                                move_fire = -1;
                            else
                                break;
                            end
                        end
                    with
                        var _SDL_KeyboardEvent[] key3;
                        every key3 in SDL_KEYUP do
                            if key3:keysym.sym == _SDLK_RIGHT or key3:keysym.sym == _SDLK_LEFT or key3:keysym.sym == _SDLK_UP or key3:keysym.sym == _SDLK_DOWN then
                                move_fire = 0;
                            end
                        end
                    end

                    par/and do
                        await 1s;
                        charmander.r = 0xFF;
                        charmander.g = 0xFF;
                        charmander.b = 0xFF;
                        emit charmander.enable_jump;
                        emit charmander.enable_movement;
                        emit charmander.change_color;
                        can_use_skills = true;
                    with
                        await 2s;
                    end
                end
            end
        with
            loop do
                key = await SDL_KEYDOWN;
                if key:keysym.sym == _SDLK_r and can_use_skills == true then
                    can_use_skills = false;

                    loop i in 105 do
                        charmander.r = 255 - i;
                        charmander.g = 255 - i;
                        charmander.b = 255 - i;
                        emit charmander.change_color;
                        await 3ms;
                    end
                    loop i in 100 do
                        charmander.r = 150;
                        charmander.g = 150 - i;
                        charmander.b = 150 - i;
                        emit charmander.change_color;
                        await 3ms;
                    end
                    await 1s;
                    charmander.r = 0xFF;
                    charmander.g = 0x00;
                    charmander.b = 0x00;
                    emit charmander.change_color;
                    par/or do
                        var _SDL_KeyboardEvent[] key2;
                        loop do
                            key2 = await SDL_KEYDOWN;
                            if key2:keysym.sym == _SDLK_r then
                                charmander.spd_y = -0.3;
                                loop i in 10 do
                                    spawn FireFloorParticle in attacks with
                                        this.ren = ren;
                                        this.w  = 0.03;
                                        this.h  = this.w * RES_X / RES_Y;
                                        this.pos_x = charmander.pos_x + charmander.w * (_rand()%100/100.0) - this.w / 2.0;
                                        this.pos_y = charmander.pos_y + charmander.h * (_rand()%100/100.0) - this.h / 2.0;
                                    end;
                                end
                                await 50ms;
                            end
                        end
                    with
                        await 5s;
                    end

                    charmander.r = 0xFF;
                    charmander.g = 0xFF;
                    charmander.b = 0xFF;
                    emit charmander.change_color;
                    can_use_skills = true;

                    await 5s;
                end
            end
        end
    end    
with
    every SDL_REDRAW do
        _SDL_RenderPresent(ren);
    end
with
    await SDL_QUIT;
end

escape 0;
