// ceusdlc brawler.ceu interfaces.ceu hero.ceu platform.ceu charmander_attacks.ceu fire_ball.ceu fire_nova.ceu fire_thrower.ceu overheat.ceu menu_screen.ceu

#ifndef ALL
    #include "sdl.ceu"

native do
    float abs_float(float x)
    {
        return x<0?-x:x;
    }
end

//============================================================

    #define PI 3.14
    #define WINDOW_TITLE "Hero Brawler"
    #define RES_X 640
    #define RES_Y 480
    #define GRAVITY 5.0
    #define FLOAT_ERR 0.05

//============================================================

    input void SDL_QUIT;
    input void SDL_REDRAW;
    input int  SDL_DT;

//============================================================

    input _SDL_KeyboardEvent[] SDL_KEYDOWN;
    input _SDL_KeyboardEvent[] SDL_KEYUP;
    input _SDL_MouseButtonEvent[] SDL_MOUSEBUTTONDOWN;

//============================================================

#include "interfaces.ceu"
#include "platform.ceu"
#include "hero.ceu"
#include "enemy.ceu"
#include "charmander_attacks.ceu"

//============================================================

    var _SDL_Window[] win;
    finalize
        win = _SDL_CreateWindow(WINDOW_TITLE, 100,100, RES_X, RES_Y, 0);
    with
        _SDL_DestroyWindow(win);
    end

    var _SDL_Renderer[] ren;
    finalize
        ren = _SDL_CreateRenderer(win, -1, 0);
    with
        _SDL_DestroyRenderer(ren);
    end
#else
    _SDL_SetWindowTitle(win, WINDOW_TITLE);
#endif

    var _SDL_Rect rect;

//============================================================

#include "menu_screen.ceu"

par/or do
    every SDL_REDRAW do
        _SDL_SetRenderDrawColor(ren, 0xAA, 0xAA, 0xAA, 0);
        _SDL_RenderFillRect(ren, null);
    end
with
    var Hero charmander with
        this.ren = ren;
        this.pos_x = 0.2;
        this.pos_y = 0.5;
        this.w  = 0.10;
        this.h  = this.w * RES_X / RES_Y;
    end;

    pool Platform[] platforms;
    pool Attack[] attacks;

    spawn Platform in platforms with
        this.ren = ren;
        this.pos_x = 0.15;
        this.pos_y = 0.65;
        this.w  = 0.25;
        this.h  = 0.05;
    end;
    spawn Platform in platforms with
        this.ren = ren;
        this.pos_x = 0.55;
        this.pos_y = 0.45;
        this.w  = 0.25;
        this.h  = 0.05;
    end;
    spawn Platform in platforms with
        this.ren = ren;
        this.pos_x = 0.1;
        this.pos_y = 0.90;
        this.w  = 0.8;
        this.h  = 0.05;
    end;

    par do
        every SDL_DT do
            loop (Platform*)plat in platforms do
                if charmander.pos_x + charmander.w >= plat:pos_x and 
                    charmander.pos_x <= plat:pos_x + plat:w and 
                    _abs_float(charmander.pos_y + charmander.h - plat:pos_y) <= FLOAT_ERR and
                    charmander.spd_y > 0 then

                    emit charmander.go_collide => plat:pos_y;
                    emit plat:go_collide;
                else
                    emit plat:un_collide;
                end
            end

            if charmander.pos_y >= 1.0 then
                emit charmander.die;
            end
        end
    with
        var _SDL_KeyboardEvent[] key;
        var bool can_use_skills = true;
        par do
            loop do
                key = await SDL_KEYDOWN;
                if key:keysym.sym == _SDLK_q and can_use_skills == true then
                    #include "fire_ball.ceu"
                end
            end
        with
            loop do
                key = await SDL_KEYDOWN;
                if key:keysym.sym == _SDLK_w and can_use_skills == true then
                    #include "fire_nova.ceu"                   
                end
            end
        with
            loop do
                key = await SDL_KEYDOWN;
                if key:keysym.sym == _SDLK_e and can_use_skills == true then
                    #include "fire_thrower.ceu"  
                end
            end
        with
            loop do
                key = await SDL_KEYDOWN;
                if key:keysym.sym == _SDLK_r and can_use_skills == true then
                    #include "overheat.ceu" 
                end
            end
        end
    end
with
    #include "teste_enemy.ceu"
with
    every SDL_REDRAW do
        _SDL_RenderPresent(ren);
    end
with
    await SDL_QUIT;
end

escape 0;
