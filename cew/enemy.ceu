class Enemy with
    var _SDL_Renderer[] ren;

    interface Body;
    interface SquareDimensions;
    event float go_collide;
    event void change_color;
    event void die;

    event _Pos* update_position;

    var int r = 0x00;
    var int g = 0x00;
    var int b = 0x00;

do
    var float hp_w = 0.4;
    var float hp_h = 0.05;
    var float hp_pos_x = 0.95 - hp_w;
    var float hp_pos_y = 0.05;
    var _SDL_Rect hp_rect;
    var int hp_r = 0xFF;
    var int hp_g = 0x63;
    var int hp_b = 0x47;

    var _SDL_Rect rect;
    //var _SDL_Texture[] tex = _ENEMY_TEXTURE;
    var _SDL_Texture[] tex = _SQUIRTLE_TEXTURE;

    var float hp = 1.0;

    par do
        loop do
            await die;
            this.pos_x = 0.5;
            this.pos_y = 0.0;
            hp = hp - 0.3;
        end
    with
        loop do
            var _Pos* actual_position = await update_position;

            this.pos_x = actual_position:x;
            this.pos_y = actual_position:y;
        end
    with
        loop do
            await change_color;
            _SDL_SetTextureColorMod((int)tex, r, g, b);
        end 
    with
        every SDL_REDRAW do
            this.rect.x = pos_x * RES_X;
            this.rect.y = pos_y * RES_Y;
            this.rect.w = w * RES_X;
            this.rect.h = h * RES_Y;
            _SDL_RenderCopy(ren, tex, null, &rect);
        end
    with
        every SDL_REDRAW do
            this.hp_rect.x = hp_pos_x * RES_X + (hp_w * (1 - hp) * RES_X);
            this.hp_rect.y = hp_pos_y * RES_Y;
            this.hp_rect.w = hp_w * hp * RES_X;
            this.hp_rect.h = hp_h * RES_Y;
            _SDL_SetRenderDrawColor(ren, hp_r, hp_g, hp_b, 0xFF);
            _SDL_RenderFillRect(ren, &hp_rect);

            this.hp_rect.x = hp_pos_x * RES_X;
            this.hp_rect.y = hp_pos_y * RES_Y;
            this.hp_rect.w = hp_w * RES_X;
            this.hp_rect.h = hp_h * RES_Y;
            _SDL_SetRenderDrawColor(ren, 0x00,  0x00, 0x00, 0xFF);
            _SDL_RenderDrawRect(ren, &hp_rect);
        end
    end
end
