#include "sdl.ceu"

input void SDL_REDRAW;
input void SDL_QUIT;
input _SDL_KeyboardEvent*    SDL_KEYDOWN;
input _SDL_MouseButtonEvent* SDL_MOUSEBUTTONDOWN;

native do
    SDL_Renderer* REN = NULL;
    int REN_W, REN_H;
end

var _SDL_Window[] win;
    finalize
        win = _SDL_CreateWindow("SDL 4", _SDL_WINDOWPOS_CENTERED,
                                         _SDL_WINDOWPOS_CENTERED,
                                         800, 480,
                                         _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(win);
    end

_SDL_GetWindowSize(win, &_REN_W, &_REN_H);

finalize
    _REN = _SDL_CreateRenderer(win, -1, 0);
with
    _SDL_DestroyRenderer(_REN);
end

var _SDL_Rect bg;
    bg.w = _REN_W;
    bg.h = _REN_H;
    bg.x = 0;
    bg.y = 0;

var _SDL_Color bg_clr;
    bg_clr.r = 0x00;
    bg_clr.g = 0x00;
    bg_clr.b = 0x00;

class Rect with
    var _SDL_Rect  rct;
    var int        dt;
do
    this.rct.w = 20;
    this.rct.h = 20;

    var _SDL_Color clr;
        clr.r = 0xFF;
        clr.g = 0xFF;
        clr.b = 0xFF;

    event int go_pause;

    par/or do
        pause/if go_pause do
            every (this.dt) ms do
                rct.x = rct.x + 1;
                if rct.x > 500 then
                    break;
                end
            end
        end
    with
        var bool paused? = false;
        loop do
            var _SDL_MouseButtonEvent* but = await SDL_MOUSEBUTTONDOWN;
            if but:button == _SDL_BUTTON_LEFT then
                if _SDL_Rect_vs_Mouse(&rct, but) then
                    paused? = not paused?;
                    emit go_pause => paused?;
                end
            end
        end
    with
        every SDL_REDRAW do
            _SDL_SetRenderDrawColor(_REN, clr.r,clr.g,clr.b,0xFF);
            _SDL_RenderFillRect(_REN, &rct);
        end
    end
    //await FOREVER;    // disappears but remains on memory
end

event int go_pause_all;

par/or do
    await SDL_QUIT;
with
    every SDL_REDRAW do
        _SDL_SetRenderDrawColor(_REN, bg_clr.r,bg_clr.g,bg_clr.b,0xFF);
        _SDL_RenderFillRect(_REN, &bg);
    end
with
    loop do
        par/or do
            pause/if go_pause_all do
                do
                    pool Rect[50] rs;
                    every 1s do
                        native _rand();
                        spawn Rect in rs with
                            this.dt    =  10 + _rand()%20;
                            this.rct.x = 100;
                            this.rct.y = 100 + _rand()%300;
                        end;
                    end
                end
            end
        with
            var int paused? = false;
            loop do
                var _SDL_KeyboardEvent* key = await SDL_KEYDOWN;
                if key:keysym.sym == _SDLK_ESCAPE then
                    break;
                else/if key:keysym.sym == _SDLK_p then
                    paused? = not paused?;
                    emit go_pause_all => paused?;
                end
            end
        end
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

escape 0;
