//============================================================

    native do
        SDL_Texture* BASIC_TEXTURE;
        SDL_Texture* SERVER_TEXTURE;
        SDL_Texture* CLIENT_TEXTURE;
    end

    finalize
        _BASIC_TEXTURE = _IMG_LoadTexture(ren, "basic_connection_screen.png");
    with
        _SDL_DestroyTexture(_BASIC_TEXTURE);
    end

    if _BASIC_TEXTURE == null then
        _printf("SDL_Init failed: %s\n", _SDL_GetError());
    end

    finalize
        _SERVER_TEXTURE = _IMG_LoadTexture(ren, "server_button.png");
    with
        _SDL_DestroyTexture(_SERVER_TEXTURE);
    end

    if _SERVER_TEXTURE == null then
        _printf("SDL_Init failed: %s\n", _SDL_GetError());
    end

    finalize
        _CLIENT_TEXTURE = _IMG_LoadTexture(ren, "client_button.png");
    with
        _SDL_DestroyTexture(_CLIENT_TEXTURE);
    end

    if _CLIENT_TEXTURE == null then
        _printf("SDL_Init failed: %s\n", _SDL_GetError());
    end

    var _SDL_Texture[] basic_tex = _BASIC_TEXTURE;
    var _SDL_Texture[] server_button_tex = _SERVER_TEXTURE;
    var _SDL_Texture[] client_button_tex = _CLIENT_TEXTURE;

//============================================================


par/or do
    every SDL_REDRAW do
        _SDL_SetRenderDrawColor(ren, 0x33, 0x33, 0x33, 0);
        _SDL_RenderFillRect(ren, null);
    end
with
    every SDL_REDRAW do
        rect.x = (RES_X - 560)/2;
        rect.y = (RES_Y - 400)/2;
        rect.w = 560;
        rect.h = 400;
        _SDL_RenderCopy(ren, basic_tex, null, &rect);
    end
with
    every SDL_REDRAW do
        rect1.x = (RES_X - 400)/2;
        rect1.y = RES_Y - (RES_Y - 400)/2 - 150;
        rect1.w = 400;
        rect1.h = 100;
        _SDL_RenderCopy(ren, server_button_tex, null, &rect1);
    end

with
    every SDL_REDRAW do
        rect2.x = (RES_X - 400)/2;
        rect2.y = RES_Y - (RES_Y - 400)/2 - 275;
        rect2.w = 400;
        rect2.h = 100;
        _SDL_RenderCopy(ren, client_button_tex, null, &rect2);
    end
with
    var _SDL_MouseButtonEvent[] mouse;
    par/or do
        mouse = await SDL_MOUSEBUTTONDOWN
            until _SDL_Rect_vs_Mouse(&rect1, mouse);
            server_state = 1;
    with
        mouse = await SDL_MOUSEBUTTONDOWN
            until _SDL_Rect_vs_Mouse(&rect2, mouse);
    end

with
    every SDL_REDRAW do
        _SDL_RenderPresent(ren);
    end
with
    await SDL_QUIT;
end
